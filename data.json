{
    "zip_mirrior/main.py": {
        "title": "zip_mirrior/main.py",
        "content": "from tkinter import (\r\n    Tk,\r\n    Label,\r\n    Button,\r\n    filedialog,\r\n    Canvas,\r\n    PhotoImage,\r\n    IntVar,\r\n    Scale,\r\n    HORIZONTAL,\r\n    Frame,\r\n)\r\nfrom PIL import Image, ImageTk, ImageDraw\r\nimport numpy as np\r\nimport os\r\n\r\n\r\nclass ImageReflectionApp:\r\n    def __init__(self, root):\r\n        self.root = root\r\n        self.root.title(\"Обработка изображения\")\r\n\r\n        # Create the main frame\r\n        self.main_frame = Frame(root)\r\n        self.main_frame.pack(side=\"left\", fill=\"both\", expand=True)\r\n\r\n        # Create the sidebar for controls\r\n        self.sidebar_frame = Frame(root, width=200, bg=\"#f4f4f4\", padx=10, pady=10)\r\n        self.sidebar_frame.pack(side=\"right\", fill=\"y\")\r\n\r\n        # GUI Elements on the sidebar\r\n        self.label = Label(\r\n            self.sidebar_frame, text=\"Загрузите изображение\", font=(\"Arial\", 14)\r\n        )\r\n        self.label.pack(pady=10)\r\n\r\n        self.load_button = Button(\r\n            self.sidebar_frame, text=\"Загрузить картинку\", command=self.load_image\r\n        )\r\n        self.load_button.pack(pady=10)\r\n\r\n        self.angle_label = Label(self.sidebar_frame, text=\"Угол (°):\")\r\n        self.angle_label.pack(pady=5)\r\n        self.angle = IntVar(value=270)\r\n        self.angle_scale = Scale(\r\n            self.sidebar_frame, from_=0, to=360, orient=HORIZONTAL, variable=self.angle\r\n        )\r\n        self.angle_scale.pack(pady=5)\r\n\r\n        self.offset_label = Label(self.sidebar_frame, text=\"Смещение (px):\")\r\n        self.offset_label.pack(pady=5)\r\n        self.offset = IntVar(value=0)\r\n        self.offset_scale = Scale(\r\n            self.sidebar_frame,\r\n            from_=-200,\r\n            to=200,\r\n            orient=HORIZONTAL,\r\n            variable=self.offset,\r\n        )\r\n        self.offset_scale.pack(pady=5)\r\n\r\n        self.process_button = Button(\r\n            self.sidebar_frame, text=\"Обработать\", command=self.process_image\r\n        )\r\n        self.process_button.pack(pady=10)\r\n\r\n        self.save_button = Button(\r\n            self.sidebar_frame, text=\"Сохранить результат\", command=self.save_image\r\n        )\r\n        self.save_button.pack(pady=10)\r\n\r\n        # Create the canvas for image display\r\n        self.canvas = Canvas(self.main_frame, width=800, height=600, bg=\"white\")\r\n        self.canvas.pack()\r\n\r\n        # Initialize variables\r\n        self.image = None\r\n        self.processed_image = None\r\n        self.filename = None\r\n\r\n    def load_image(self):\r\n        file_path = filedialog.askopenfilename(\r\n            filetypes=[(\"Image files\", \"*.png;*.jpg;*.jpeg;*.bmp\")]\r\n        )\r\n        if file_path:\r\n            self.filename = file_path\r\n            self.image = Image.open(file_path)\r\n            self.display_image(self.image)\r\n\r\n    def display_image(self, img):\r\n        # Resize image for display in the canvas\r\n        img.thumbnail((800, 600))\r\n        self.tk_image = ImageTk.PhotoImage(img)\r\n        self.canvas.create_image(400, 300, image=self.tk_image)\r\n\r\n    def process_image(self):\r\n        if not self.image:\r\n            return\r\n\r\n        # Convert image to numpy array\r\n        img_array = np.array(self.image)\r\n        height, width, _ = img_array.shape\r\n\r\n        # Define reflection parameters\r\n        angle = np.deg2rad(self.angle.get())  # Angle in radians\r\n        offset = self.offset.get()\r\n\r\n        # Create mask for \"red\" pixels (adjust for the uploaded image)\r\n        red_mask = (\r\n            (img_array[:, :, 0] > 150)\r\n            & (img_array[:, :, 1] < 100)\r\n            & (img_array[:, :, 2] < 100)\r\n        )\r\n\r\n        # Create a blank result image\r\n        result_array = img_array.copy()\r\n\r\n        # Reflect pixels (mirror effect)\r\n        for y in range(height):\r\n            for x in range(width):\r\n                if red_mask[y, x]:\r\n                    # Simple horizontal mirror effect\r\n                    x_reflected = width - x - 1\r\n                    y_reflected = (\r\n                        y  # No change in y to keep the vertical position fixed\r\n                    )\r\n\r\n                    # Apply angle transformation if needed (can add rotation later)\r\n                    x_rotated = int(\r\n                        (x_reflected - width // 2) * np.cos(angle)\r\n                        - (y_reflected - height // 2) * np.sin(angle)\r\n                        + width // 2\r\n                        + offset\r\n                    )\r\n                    y_rotated = int(\r\n                        (x_reflected - width // 2) * np.sin(angle)\r\n                        + (y_reflected - height // 2) * np.cos(angle)\r\n                        + height // 2\r\n                    )\r\n\r\n                    # Ensure reflection stays within bounds\r\n                    if 0 <= x_rotated < width and 0 <= y_rotated < height:\r\n                        result_array[y, x] = img_array[y_rotated, x_rotated]\r\n\r\n        # Save the processed image\r\n        self.processed_image = Image.fromarray(result_array)\r\n        self.display_image(self.processed_image)\r\n\r\n    def save_image(self):\r\n        if self.processed_image:\r\n            save_path = filedialog.asksaveasfilename(\r\n                defaultextension=\".png\", filetypes=[(\"PNG files\", \"*.png\")]\r\n            )\r\n            if save_path:\r\n                self.processed_image.save(save_path)\r\n\r\n\r\n# Run the application\r\nroot = Tk()\r\napp = ImageReflectionApp(root)\r\nroot.mainloop()\r\n"
    },
    "backend/core/config.py": {
        "title": "backend/core/config.py",
        "content": "# app/core/config.py\r\nfrom datetime import timedelta\r\n\r\nSECRET_KEY = \"your_secret_key\"\r\nALGORITHM = \"HS256\"\r\nACCESS_TOKEN_EXPIRE_MINUTES = 30"
    },
    "backend/core/security.py": {
        "title": "backend/core/security.py",
        "content": "from datetime import datetime, timedelta\r\nfrom jose import jwt, JWTError\r\nfrom passlib.context import CryptContext\r\nfrom core.config import SECRET_KEY, ALGORITHM\r\n\r\npwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\r\n\r\ndef verify_password(plain_password, hashed_password):\r\n    return pwd_context.verify(plain_password, hashed_password)\r\n\r\ndef get_password_hash(password):\r\n    return pwd_context.hash(password)\r\n\r\ndef create_access_token(data: dict, expires_delta: timedelta = None):\r\n    to_encode = data.copy()\r\n    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=15))\r\n    to_encode.update({\"exp\": expire})\r\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\r\n    return encoded_jwt"
    },
    "backend/core/__init__.py": {
        "title": "backend/core/__init__.py",
        "content": ""
    },
    "backend/main.py": {
        "title": "backend/main.py",
        "content": "\r\nfrom fastapi import FastAPI, Depends, HTTPException, status\r\nfrom fastapi.middleware.cors import CORSMiddleware\r\nfrom sqlalchemy.orm import Session, declarative_base, Mapped, mapped_column\r\nfrom sqlalchemy.exc import OperationalError\r\nfrom sqlalchemy import text, MetaData, Column, Table, Integer, String, ForeignKey, select, inspect\r\nfrom sql_app.database import engine\r\nfrom sql_app.schemas import UserCreate, User, ItemCreate, Token\r\nfrom sql_app.crud import  get_user, create_user, delete_user\r\nfrom sql_app.crud import create_item\r\nfrom sql_app.database import Base\r\nfrom fastapi.security import OAuth2PasswordBearer\r\nfrom typing import Annotated\r\nfrom sql_app import models\r\nfrom datetime import timedelta\r\nfrom core.config import ACCESS_TOKEN_EXPIRE_MINUTES\r\nfrom core.security import create_access_token\r\nfrom sql_app.database import SessionLocal\r\n\r\n\r\n# Подключаем уже созданный SessionLocal\r\napp = FastAPI()\r\n\r\norigins = [\r\n    'http://localhost:3000'\r\n]\r\n\r\napp.add_middleware(\r\n    CORSMiddleware,\r\n    allow_origins=origins,\r\n    allow_credentials=True,\r\n    allow_methods=[\"*\"],\r\n    allow_headers=[\"*\"],\r\n)\r\n\r\nBase.metadata.create_all(bind=engine)\r\n\r\n@app.get(\"/\")\r\ndef root():\r\n    return \"hello\"\r\n\r\n# Функция для получения сессии базы данных\r\ndef get_db():\r\n    db = SessionLocal()\r\n    try:\r\n        yield db\r\n    finally:\r\n        db.close()\r\n\r\n# Эндпоинт для проверки подключения к базе данных\r\n\r\n\r\n@app.get(\"/check_db_connection\")\r\ndef check_db_connection(db: Session = Depends(get_db)):\r\n    try:\r\n        # Простой SQL-запрос для проверки подключения\r\n        db.execute(text(\"SELECT 1\"))\r\n        return {\"status\": \"Database connection is successful\"}\r\n    except OperationalError:\r\n        return {\"status\": \"Database connection failed\"}\r\n\r\n\r\n# with engine.connect() as connection:\r\n#     result = connection.execute(text(\"select now()\"))\r\n#     print(result.all())\r\n#\r\n# metadata = MetaData()\r\n#\r\n# user_table = Table(\r\n#     \"Users\",\r\n#     metadata,\r\n#     Column(\"id\",Integer,primary_key=True),\r\n#     Column(\"name\", String),\r\n# )\r\n#\r\n# address_table = Table(\r\n#     \"Address\",\r\n#     metadata,\r\n#     Column(\"id\", Integer, primary_key=True),\r\n#     Column(\"name\", String),\r\n#     Column(\"user_id\", ForeignKey('Users.id'))\r\n# )\r\n#\r\n# metadata.drop_all(engine)\r\n\r\n# Base = declarative_base()\r\n# class AbstractModel(Base):\r\n#     __abstract__ = True\r\n#     id: Mapped[int] = mapped_column(primary_key=True, nullable=False)\r\n#\r\n#\r\n# class UserModel(AbstractModel):\r\n#     __tablename__ = 'users'\r\n#     name: Mapped[str] = mapped_column()\r\n\r\n#\r\n# class ProductModel(AbstractModel):\r\n#     __tablename__ = 'products'\r\n#     name: Mapped[str] = mapped_column()\r\n#     user_id: Mapped[int] = mapped_column(ForeignKey('users.id'))\r\n#\r\n#\r\n# with Session(engine) as session:\r\n#     with session.begin():\r\n#         # Base.metadata.create_all(engine)\r\n#         user = UserModel(name=\"Ilya\")\r\n#         session.add(user)\r\n#         session.flush()  # Этот вызов обеспечит, что пользователь уже имеет присвоенный ID\r\n#\r\n#         # Теперь создаём продукт и указываем id только что созданного пользователя\r\n#         product = ProductModel(name=\"milk\", user_id=user.id)\r\n#         session.add(product)\r\n\r\n\r\n# USERS ENDPOINT\r\n\r\n\r\n@app.post(\"/users/\")\r\ndef create_user_endpoint(user: UserCreate, db: Session = Depends(get_db)):\r\n    return create_user(db=db, user=user)\r\n\r\n@app.delete(\"/users/{user_id}\")\r\ndef delete_user_endpoint(user_id: int, db: Session = Depends(get_db)):\r\n    return delete_user(db=db, user_id=user_id)\r\n\r\n\r\n@app.get(\"/users/{user_id}\", response_model = User)\r\ndef get_user_endpoint(user_id: int, db:Session=Depends(get_db)):\r\n    user = get_user(db=db, user_id=user_id)\r\n    if user is None:\r\n        raise HTTPException(status_code=404, detail = \"user is not found\")\r\n    return user\r\n\r\n\r\n# ITEMS ENDPOINT\r\n\r\n@app.post(\"/items/{user_id}\")\r\ndef create_item_endpoint(item: ItemCreate, user_id: int, db: Session=Depends(get_db)):\r\n    return create_item(db=db, item=item, user_id=user_id)\r\n\r\n\r\n\r\n\r\n@app.post(\"/register\", response_model=Token)\r\ndef register_user(user: UserCreate, db: Session = Depends(get_db)):\r\n    db_user = db.query(models.User).filter(models.User.username == user.username).first()\r\n    if db_user:\r\n        raise HTTPException(\r\n            status_code=status.HTTP_400_BAD_REQUEST,\r\n            detail=\"Email already registered\"\r\n        )\r\n\r\n    new_user = create_user(db, user)\r\n    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\r\n    access_token = create_access_token(\r\n        data={\"sub\": new_user.username}, expires_delta=access_token_expires\r\n    )\r\n    return {\"access_token\": access_token, \"token_type\": \"bearer\"}\r\n\r\n\r\n"
    },
    "backend/README.md": {
        "title": "backend/README.md",
        "content": ""
    },
    "backend/sql_app/crud.py": {
        "title": "backend/sql_app/crud.py",
        "content": "from sqlalchemy.orm import Session\r\nfrom core.security import get_password_hash \r\nfrom . import models, schemas\r\n\r\n\r\ndef get_user(db: Session, user_id: int):\r\n    return db.query(models.User).filter(models.User.id == user_id).first()\r\n\r\n\r\ndef get_user_by_username(db: Session, username: str):\r\n    return db.query(models.User).filter(models.User.username == username).first()\r\n\r\n\r\n\r\n\r\ndef create_user(db: Session, user: schemas.UserCreate):\r\n    hashed_password = get_password_hash(user.password)\r\n    db_user = models.User(username=user.username, hashed_password=hashed_password)\r\n    db.add(db_user)\r\n    db.commit()\r\n    db.refresh(db_user)\r\n    return db_user\r\n\r\n\r\ndef delete_user(db: Session, user_id: int):\r\n    db_user = db.query(models.User).filter(models.User.id == user_id).first()\r\n    if db_user:\r\n        db.delete(db_user)\r\n        db.commit()\r\n    return db_user\r\n\r\n\r\n\r\ndef create_item(db: Session, item: schemas.ItemCreate, user_id: int):\r\n    db_item = models.Item(title=item.title, description=item.description, owner_id=user_id)\r\n    db.add(db_item)\r\n    db.commit()\r\n    db.refresh(db_item)\r\n    return db_item\r\n\r\n"
    },
    "backend/sql_app/database.py": {
        "title": "backend/sql_app/database.py",
        "content": "from sqlalchemy import create_engine\r\nfrom sqlalchemy.ext.declarative import declarative_base\r\nfrom sqlalchemy.orm import sessionmaker\r\n\r\n# SQLALCHEMY_DATABASE_URL = \"sqlite:///./sql_app.db\"\r\nSQLALCHEMY_DATABASE_URL = \"postgresql://postgres:i2903T1505@localhost:5432/forum\"\r\n\r\nengine = create_engine(\r\n    SQLALCHEMY_DATABASE_URL,\r\n    echo=True\r\n)\r\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\r\n\r\nBase = declarative_base()"
    },
    "backend/sql_app/models.py": {
        "title": "backend/sql_app/models.py",
        "content": "from sqlalchemy import Boolean, Column, ForeignKey, Integer, String\r\nfrom sqlalchemy.orm import relationship\r\n\r\nfrom .database import Base\r\n\r\n\r\nclass User(Base):\r\n    __tablename__ = \"users\"\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    username = Column(String, unique=True, index=True)\r\n    hashed_password = Column(String)\r\n    is_active = Column(Boolean, default=True)\r\n\r\n    items = relationship(\"Item\", back_populates=\"owner\")\r\n\r\n\r\nclass Item(Base):\r\n    __tablename__ = \"items\"\r\n\r\n    id = Column(Integer, primary_key=True)\r\n    title = Column(String, index=True)\r\n    description = Column(String, index=True)\r\n    owner_id = Column(Integer, ForeignKey(\"users.id\"))\r\n\r\n    owner = relationship(\"User\", back_populates=\"items\")\r\n\r\n"
    },
    "backend/sql_app/schemas.py": {
        "title": "backend/sql_app/schemas.py",
        "content": "from pydantic import BaseModel\r\n\r\n\r\nclass ItemBase(BaseModel):\r\n    title: str\r\n    description: str | None = None\r\n\r\n\r\nclass ItemCreate(ItemBase):\r\n    pass\r\n\r\n\r\nclass Item(ItemBase):\r\n    id: int\r\n    owner_id: int\r\n\r\n    class Config:\r\n        orm_mode = True\r\n\r\n\r\nclass UserBase(BaseModel):\r\n    username: str\r\n\r\n\r\nclass UserCreate(UserBase):\r\n    password: str\r\n\r\n\r\nclass User(UserBase):\r\n    id: int\r\n    is_active: bool\r\n    items: list[Item] = []\r\n\r\n    class Config:\r\n        orm_mode = True\r\n\r\nclass Token(BaseModel):\r\n    access_token: str\r\n    token_type: str"
    },
    "backend/sql_app/__init__.py": {
        "title": "backend/sql_app/__init__.py",
        "content": ""
    }
}